# use refinment and define the refiner to use
 analysis.algorithm.CEGAR                 = false
 
# ARGCPA is needed for counterexample analysis
 cpa = cpa.arg.ARGCPA
 ARGCPA.cpa              = cpa.composite.CompositeCPA
 CompositeCPA.cpas       = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.constraints.ConstraintsCPA, cpa.value.ValueAnalysisCPA, cpa.loop.LoopAnalysisCPA, cpa.smg.SMGCPA, cpa.conditions.global.GlobalConditionsCPA, cpa.assumptions.storage.AssumptionStorageCPA, cpa.loopstack.LoopstackCPA
# this automaton defines which locations are the error locations
# !!!
# specification = specification/default.spc

#include includes/resource-limits.properties

 log.consoleLevel = WARNING

 output.disable = false
 
 cpa.value.symbolic.useSymbolicValues = true
 solver.solver = MathSAT5
 
 cpa.loop.maxLoopIterations = 3
 


# ----------------------------------------------------------------------
# This configuration file uses a combination of value analysis
# and symbolic memory graphs to verify memory safety properties.
# ----------------------------------------------------------------------

#include includes/valueAnalysis.properties

# specification to find memory related problems
specification = specification/cpalien-leaks.spc, specification/TerminatingFunctions.spc



# analysis.unknownAsTrue = true

cpa.conditions.global.reached.size = 150000

cpa.loopstack.maxLoopIterations = 130


# Memory allocation functions
cpa.smg.memoryAllocationFunctions = malloc,__kmalloc,kmalloc,kzalloc,kzalloc_node,ldv_zalloc,ldv_malloc

# Array allocation functions
cpa.smg.arrayAllocationFunctions = calloc,kmalloc_array,kcalloc

# Allocation functions which set memory to zero
cpa.smg.zeroingMemoryAllocation = calloc,kzalloc,kcalloc,kzalloc_node,ldv_zalloc

# Deallocation functions
cpa.smg.deallocationFunctions = free,kfree,kfree_const

# checking conterexamples, esp. with CBMC does not make sense
analysis.checkCounterexamples = false

analysis.traversal.order                  = bfs

# !!!
# analysis.traversal.useReversePostorder    = false
# !!!
# analysis.traversal.useCallstack           = false

cpa.smg.enableMallocFail       = false
cpa.smg.handleUnknownFunctions = assume_safe
cpa.smg.guessSizeOfUnknownMemorySize = true

cfa.useMultiEdges = false

# Disable all output files except the error path.
# !!!
# output.disable = true

# Write counterexample to file (required by competition).
cpa.arg.errorPath.file = ErrorPath.txt

# Disable statistics for memory consumption.
statistics.memory = false

# This is the configuration used when verifying memory safety properties (actually this configuration).
memorysafety.config = smg-ldv.properties
