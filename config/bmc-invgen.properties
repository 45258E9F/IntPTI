// ----------------------------------------------------------------------
// This bmc configuration is used for generating invariants / checking
// interpolants if they are invariants during Predicate Analysis refinement
// ----------------------------------------------------------------------

#include bmc.properties

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA, cpa.assumptions.storage.AssumptionStorageCPA, cpa.bounds.BoundsCPA, cpa.edgeexclusion.EdgeExclusionCPA, cpa.programcounter.ProgramCounterCPA, cpa.value.ValueAnalysisCPA

// enable induction for safety verification
[bmc]
    induction = true
    addInvariantsByAI = false
    addInvariantsByInduction = false

[invariantGeneration]
    async = false
    adjustConditions = false

[cpa]
    bounds.maxLoopIterationsUpperBound = 1
    bounds.maxLoopIterations = 1
    predicate.encodeFloatAs = RATIONAL
    callstack.depth=1

[]
solver.solver = MATHSAT5
cfa.transformIntoSingleLoop = false
