# ----------------------------------------------------------------------
# This configuration file uses a combination of value analysis
# and symbolic memory graphs to verify memory safety properties.
# ----------------------------------------------------------------------


cpa = cpa.arg.ARGCPA
ARGCPA.cpa              = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.loopstack.LoopstackCPA, cpa.range.RangeCPA

# analysis.unknownAsTrue = true

cpa.loopstack.maxLoopIterations = 2

# Memory allocation functions
cpa.smg.memoryAllocationFunctions = malloc,__kmalloc,kmalloc,kzalloc,kzalloc_node,ldv_zalloc,ldv_malloc

# Array allocation functions
cpa.smg.arrayAllocationFunctions = calloc,kmalloc_array,kcalloc

# Allocation functions which set memory to zero
cpa.smg.zeroingMemoryAllocation = calloc,kzalloc,kcalloc,kzalloc_node,ldv_zalloc

# Deallocation functions
cpa.smg.deallocationFunctions = free,kfree,kfree_const

# checking conterexamples, esp. with CBMC does not make sense
analysis.checkCounterexamples = false

analysis.traversal.order                  = bfs
analysis.traversal.useReversePostorder    = false
analysis.traversal.useCallstack           = false

cpa.smg.enableMallocFail       = false
cpa.smg.handleUnknownFunctions = assume_safe
cpa.smg.guessSizeOfUnknownMemorySize = true
cpa.smg.exportSMGwhen = INTERESTING

cfa.useMultiEdges = false

# Write counterexample to file (required by competition).
cpa.arg.errorPath.file = ErrorPath.txt

# Disable statistics for memory consumption.
statistics.memory = false

# This is the configuration used when verifying memory safety properties (actually this configuration).
# memorysafety.config = smg-ldv.properties
